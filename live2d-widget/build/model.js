import{showMessage}from"./message.js";import{loadExternalResource,randomOtherOption}from"./utils.js";import logger from"./logger.js";class ModelManager{constructor(e,t=[]){var s;this.modelList=null;let{apiPath:i,cdnPath:o}=e;const{cubism2Path:d,cubism5Path:l}=e;let a=!1;if("string"==typeof o)o.endsWith("/")||(o+="/"),a=!0;else if("string"==typeof i)i.endsWith("/")||(i+="/"),o=i,a=!0,logger.warn("apiPath option is deprecated. Please use cdnPath instead.");else if(!t.length)throw"Invalid initWidget argument!";let h=parseInt(localStorage.getItem("modelId"),10),r=parseInt(localStorage.getItem("modelTexturesId"),10);(isNaN(h)||isNaN(r))&&(r=0),isNaN(h)&&(h=null!==(s=e.modelId)&&void 0!==s?s:0),this.useCDN=a,this.cdnPath=o||"",this.cubism2Path=d||"",this.cubism5Path=l||"",this._modelId=h,this._modelTexturesId=r,this.currentModelVersion=0,this.loading=!1,this.modelJSONCache={},this.models=t}static async initCheck(e,t=[]){const s=new ModelManager(e,t);if(s.useCDN){const e=await fetch(`${s.cdnPath}model_list.json`);s.modelList=await e.json(),s.modelId>=s.modelList.models.length&&(s.modelId=0);const t=s.modelList.models[s.modelId];if(Array.isArray(t))s.modelTexturesId>=t.length&&(s.modelTexturesId=0);else{const e=`${s.cdnPath}model/${t}/index.json`,i=await s.fetchWithCache(e);if(2===s.checkModelVersion(i)){const e=await s.loadTextureCache(t);s.modelTexturesId>=e.length&&(s.modelTexturesId=0)}}}else s.modelId>=s.models.length&&(s.modelId=0),s.modelTexturesId>=s.models[s.modelId].paths.length&&(s.modelTexturesId=0);return s}set modelId(e){this._modelId=e,localStorage.setItem("modelId",e.toString())}get modelId(){return this._modelId}set modelTexturesId(e){this._modelTexturesId=e,localStorage.setItem("modelTexturesId",e.toString())}get modelTexturesId(){return this._modelTexturesId}resetCanvas(){document.getElementById("waifu-canvas").innerHTML='<canvas id="live2d" width="800" height="800"></canvas>'}async fetchWithCache(e){let t;if(e in this.modelJSONCache)t=this.modelJSONCache[e];else{try{const s=await fetch(e);t=await s.json()}catch(e){t=null}this.modelJSONCache[e]=t}return t}checkModelVersion(e){return 3===e.Version||e.FileReferences?3:2}async loadLive2D(e,t){if(this.loading)logger.warn("Still loading. Abort.");else{this.loading=!0;try{const s=this.checkModelVersion(t);if(2===s){if(!this.cubism2model){if(!this.cubism2Path)return void logger.error("No cubism2Path set, cannot load Cubism 2 Core.");await loadExternalResource(this.cubism2Path,"js");const{default:e}=await import("./cubism2/index.js");this.cubism2model=new e}3===this.currentModelVersion&&(this.cubism5model.release(),this.resetCanvas()),3!==this.currentModelVersion&&this.cubism2model.gl?await this.cubism2model.changeModelWithJSON(e,t):await this.cubism2model.init("live2d",e,t)}else{if(!this.cubism5Path)return void logger.error("No cubism5Path set, cannot load Cubism 5 Core.");await loadExternalResource(this.cubism5Path,"js");const{AppDelegate:t}=await import("./cubism5/index.js");this.cubism5model=new t,2===this.currentModelVersion&&(this.cubism2model.destroy(),this.resetCanvas()),2!==this.currentModelVersion&&this.cubism5model.subdelegates.at(0)?this.cubism5model.changeModel(e):(this.cubism5model.initialize(),this.cubism5model.changeModel(e),this.cubism5model.run())}logger.info(`Model ${e} (Cubism version ${s}) loaded`),this.currentModelVersion=s}catch(e){console.error("loadLive2D failed",e)}this.loading=!1}}async loadTextureCache(e){return await this.fetchWithCache(`${this.cdnPath}model/${e}/textures.cache`)||[]}async loadModel(e){let t,s;if(this.useCDN){let e=this.modelList.models[this.modelId];Array.isArray(e)&&(e=e[this.modelTexturesId]),t=`${this.cdnPath}model/${e}/index.json`,s=await this.fetchWithCache(t);if(2===this.checkModelVersion(s)){const t=await this.loadTextureCache(e);if(t.length>0){let e=t[this.modelTexturesId];"string"==typeof e&&(e=[e]),s.textures=e}}}else t=this.models[this.modelId].paths[this.modelTexturesId],s=await this.fetchWithCache(t);await this.loadLive2D(t,s),showMessage(e,4e3,10)}async loadRandTexture(e="",t=""){const{modelId:s}=this;let i=!1;if(this.useCDN){const e=this.modelList.models[s];if(Array.isArray(e))this.modelTexturesId=randomOtherOption(e.length,this.modelTexturesId);else{const t=`${this.cdnPath}model/${e}/index.json`,s=await this.fetchWithCache(t);if(2===this.checkModelVersion(s)){const t=await this.loadTextureCache(e);t.length<=1?i=!0:this.modelTexturesId=randomOtherOption(t.length,this.modelTexturesId)}else i=!0}}else 1===this.models[s].paths.length?i=!0:this.modelTexturesId=randomOtherOption(this.models[s].paths.length,this.modelTexturesId);i?showMessage(t,4e3,10):await this.loadModel(e)}async loadNextModel(){this.modelTexturesId=0,this.useCDN?(this.modelId=(this.modelId+1)%this.modelList.models.length,await this.loadModel(this.modelList.messages[this.modelId])):(this.modelId=(this.modelId+1)%this.models.length,await this.loadModel(this.models[this.modelId].message))}}export{ModelManager};