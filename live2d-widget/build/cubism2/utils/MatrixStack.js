class MatrixStack{static reset(){this.depth=0}static loadIdentity(){for(let t=0;t<16;t++)this.currentMatrix[t]=t%5==0?1:0}static push(){this.depth;const t=16*(this.depth+1);this.matrixStack.length<t+16&&(this.matrixStack.length=t+16);for(let i=0;i<16;i++)this.matrixStack[t+i]=this.currentMatrix[i];this.depth++}static pop(){this.depth--,this.depth<0&&(this.depth=0);const t=16*this.depth;for(let i=0;i<16;i++)this.currentMatrix[i]=this.matrixStack[t+i]}static getMatrix(){return this.currentMatrix}static multMatrix(t){let i,r,a;for(i=0;i<16;i++)this.tmp[i]=0;for(i=0;i<4;i++)for(r=0;r<4;r++)for(a=0;a<4;a++)this.tmp[i+4*r]+=this.currentMatrix[i+4*a]*t[a+4*r];for(i=0;i<16;i++)this.currentMatrix[i]=this.tmp[i]}}MatrixStack.matrixStack=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],MatrixStack.depth=0,MatrixStack.currentMatrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],MatrixStack.tmp=new Array(16);export default MatrixStack;